{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red242\green242\blue242;\red0\green0\blue0;\red97\green97\blue97;
\red140\green132\blue255;}
{\*\expandedcolortbl;;\csgray\c95825;\cssrgb\c0\c0\c0;\csgenericrgb\c37903\c37903\c37903;
\cssrgb\c61800\c61007\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 \CocoaLigature0 Perfekt! Ich habe einen detaillierten Plan mit 17 Hauptaufgaben erstellt.\
  Hier ist der \'dcberblick:\
\
  \cf1 \uc0\u55357 \u56523  Plan: Simple Notes App \u8594  Obsidian Plugin\cf2 \
\
  \cf4 Phase 1: Grundlagen (Tasks 1-3)\cf2 \
\
  \cf1 Obsidian Plugin Setup\cf2 \
  - TypeScript-Projekt mit Obsidian API einrichten\
  - manifest.json erstellen (id, name, version, minAppVersion)\
  - Build-System (esbuild) f\'fcr Hot-Reload konfigurieren\
  - Datenmodell von LocalStorage \uc0\u8594  Obsidian Data API (\cf5 plugin.saveData()\cf2 )\
\
  \cf4 Phase 2: Views (Tasks 4-6)\cf2 \
\
  \cf1 3 Custom Views als ItemView\cf2 \
  - Board View: Grid-Layout mit Drag & Drop\
  - Kanban View: 8-Spalten-Layout (Unassigned + Mo-So)\
  - Plan View: ContentEditable Editor mit Live-Parsing\
\
  \cf4 Phase 3: Core Features (Tasks 7-11)\cf2 \
\
  \cf1 Haupt-Funktionalit\'e4t portieren\cf2 \
  - Note Parsing: Kategorien (\cf5 --k\cf2 , \cf5 --u2a\cf2 ), Zeit (\cf5 30m\cf2 ), Priorit\'e4t (\cf5 !!\cf2 )\
  - Stack-System: Drag-to-Stack, Sequential/Group Types, Modal\
  - Filter-System: Kategorien, Zeit, Priorit\'e4t, Tags\
  - Work Timer: Focus Mode, Session Stats\
  - Undo-System: Cmd+Z mit Obsidian Commands\
\
  \cf4 Phase 4: Integration (Tasks 12-14)\cf2 \
\
  \cf1 Obsidian-spezifische Features\cf2 \
  - CSS mit Theme-Variablen (dark/light mode)\
  - Settings Tab: Kategorien konfigurieren, Auto-Backup, etc.\
  - Ribbon Icons: Quick-Access zu Views\
  - Commands: View-Switching, Filter, Shortcuts\
\
  \cf4 Phase 5: Finalisierung (Tasks 15-17)\cf2 \
\
  - Backup-System anpassen (Vault-Integration)\
  - Testing & Debugging\
  - Community-Dokumentation\
\
  \cf1 \uc0\u55357 \u56593  Wichtigste \'c4nderungen vs. Standalone App\cf2 \
\
  1. \cf1 Datenspeicherung\cf2 : LocalStorage \uc0\u8594  \cf5 plugin.saveData()\cf2 /\cf5 loadData()\cf2 \
  2. \cf1 Views\cf2 : Vanilla JS \uc0\u8594  Obsidian \cf5 ItemView\cf2  Klassen\
  3. \cf1 UI\cf2 : Eigene Modals \uc0\u8594  \cf5 new Modal(this.app)\cf2 \
  4. \cf1 Commands\cf2 : Custom Palette \uc0\u8594  \cf5 addCommand()\cf2  API\
  5. \cf1 Styling\cf2 : Terminal CSS \uc0\u8594  Obsidian Theme Variables\
\
  \cf1 \uc0\u55357 \u56481  Technische Herausforderungen\cf2 \
\
  - \cf1 Drag & Drop\cf2 : Mit Obsidian's DOM-Struktur kompatibel machen\
  - \cf1 ContentEditable\cf2 : Plan View in Obsidian Editor integrieren\
  - \cf1 Performance\cf2 : 3 Views gleichzeitig ge\'f6ffnet \uc0\u8594  effizientes Rendering\
  - \cf1 Theme Support\cf2 : CSS muss mit allen Community Themes funktionieren\
\
  M\'f6chtest du mit der Implementierung starten? Ich kann direkt mit Task 1\
  (Plugin-Grundstruktur) beginnen! \uc0\u55357 \u56960 \
}